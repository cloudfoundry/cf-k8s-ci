common:
  slack_hook: &slackHook
    put: slack
    params:
      attachments: |2
          [{
              "color": "danger",
              "actions": [
                    {
                      "type": "button",
                      "text": "View in Concourse",
                      "url": "https://ci.korifi.cf-app.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
                    }
              ]
          }]
      channel: '#korifi-ci'
      text: |
        Pipeline *$BUILD_PIPELINE_NAME* failed :cry:

        Job is *$BUILD_JOB_NAME*
        Build name is *$BUILD_NAME*

  envoy_logs: &envoyLogs
    task: get-envoy-logs
    file: korifi-ci/pipelines/tasks/get-envoy-logs.yml
    image: ci-image
    params:
      CLUSTER_NAME: pr-e2e
      GCP_ZONE: europe-west1-b

  set_cluster_vars: &setClusterVars
    task: set-cluster-env-vars
    file: korifi-ci/pipelines/tasks/set-cluster-env-vars.yml
    image: ci-image
    params:
      CLUSTER_NAME: undefined
      PROPERTY: undefined

groups:
- name: main
  jobs:
  - run-tests-main
  - run-e2es-main
  - publish-dev-images
- name: pr
  jobs:
  - allow-e2es
  - run-e2es-pr
- name: periodics
  jobs:
  - run-tests-periodic
  - run-e2es-periodic
  - bump-tests-vendor
- name: acceptance
  jobs:
  - deploy-korifi-acceptance
  - deploy-pairup
  - deploy-postfacto
- name: release
  jobs:
  - bump-major-version
  - bump-minor-version
  - publish-release
- name: clusters
  jobs:
  - create-cluster-acceptance
  - delete-cluster-acceptance
  - create-cluster-pr-e2e
  - delete-cluster-pr-e2e

jobs:
# ===== main =====
- name: run-tests-main
  on_failure:
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - tests (main)"
    - *slackHook
  plan:
  - in_parallel:
    - get: ci-image
    - get: golangci-lint-image
    - get: korifi
      trigger: true
    - get: korifi-ci

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: pending
          context: "Concourse - tests (main)"

  - in_parallel:
      steps:
      - task: linter
        file: korifi-ci/pipelines/tasks/run-make-target.yml
        image: golangci-lint-image
        input_mapping:
          root: korifi
        params:
          TARGET: lint

      - in_parallel: &unit-integration
        - task: api-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-api
          params:
            DIR: api
            TARGET: test

        - task: controllers-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-controllers
          params:
            DIR: controllers
            TARGET: test

        - task: kpack-image-builder-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-kib
          params:
            DIR: kpack-image-builder
            TARGET: test

        - task: statefulset-runner-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-stset-runner
          params:
            DIR: statefulset-runner
            TARGET: test

        - task: job-task-runner-tests
          file: korifi-ci/pipelines/tasks/run-make-target.yml
          image: ci-image
          input_mapping:
            root: korifi
          output_mapping:
            coverage: coverage-job-task-runner
          params:
            DIR: job-task-runner
            TARGET: test

  - task: publish-code-coverage
    image: ci-image
    file: korifi-ci/pipelines/tasks/publish-code-coverage.yml
    params:
      CC_TEST_REPORTER_ID: ((code-climate/test-reporter.id))

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: success
          context: "Concourse - tests (main)"

- name: run-e2es-main
  on_failure:
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - E2E (main)"
    - *slackHook
    - *envoyLogs

  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
      trigger: true
      passed:
        - run-tests-main
    - get: korifi-ci
    - get: gcloud-image
    - get: cf-k8s-secrets

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: pending
          context: "Concourse - E2E (main)"

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      PROPERTY: pr_e2e_ip

  - do: &end-to-ends
    - do: &deploy-korifi
      - load_var: cluster-env-vars
        file: clusters/env_vars.yaml
      - task: get-ip-addr
        file: korifi-ci/pipelines/tasks/get-terraform-property.yml
        image: gcloud-image
        params:
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          PROPERTY: ((.:cluster-env-vars.PROPERTY))

      - task: install-korifi-dependencies
        file: korifi-ci/pipelines/tasks/install-korifi-dependencies.yml
        image: ci-image
        timeout: 30m
        params:
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          GCP_PROJECT_ID: cf-on-k8s-wg
          GCP_ZONE: europe-west1-b
          USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))

      - task: deploy-korifi
        file: korifi-ci/pipelines/tasks/deploy-korifi.yml
        image: ci-image
        timeout: 30m
        params:
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          GCP_ZONE: europe-west1-b
          USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))
          DOCKER_SERVER: europe-west1-docker.pkg.dev
          DOCKER_USERNAME: _json_key
          DOCKER_PASSWORD: ((gcp-artifact-registry-writer))

    - do: &set-account-env-vars
      - task: set-account-env-vars
        file: korifi-ci/pipelines/tasks/set-account-env-vars.yml
        image: ci-image
        params:
          CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
          GCP_ZONE: europe-west1-b
          ROOT_NAMESPACE: cf

      - load_var: accounts_env_vars
        file: accounts/env_vars.yaml

    - in_parallel:
      - do: &smoke-tests
        - task: run-smoke-tests
          file: korifi-ci/pipelines/tasks/run-smoke-tests.yml
          image: ci-image
          timeout: 30m
          params:
            CF_ADMIN_KEY: ((.:accounts_env_vars.CF_ADMIN_KEY))
            CF_ADMIN_CERT: ((.:accounts_env_vars.CF_ADMIN_CERT))
            SMOKE_TEST_USER: cf-admin
            SMOKE_TEST_APPS_DOMAIN: ((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
            SMOKE_TEST_APP_ROUTE_PROTOCOL: https
            SMOKE_TEST_API_ENDPOINT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
            SMOKE_TEST_SKIP_SSL: true
      - task: run-e2e-tests
        file: korifi-ci/pipelines/tasks/run-e2e-tests.yml
        image: ci-image
        timeout: 30m
        params:
          ROOT_NAMESPACE: cf
          API_SERVER_ROOT: https://cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          APP_FQDN: ((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
          E2E_USER_NAME: ((.:accounts_env_vars.E2E_USER_NAME))
          E2E_USER_PEM: ((.:accounts_env_vars.E2E_USER_PEM))
          E2E_SERVICE_ACCOUNT: ((.:accounts_env_vars.E2E_SERVICE_ACCOUNT))
          E2E_SERVICE_ACCOUNT_TOKEN: ((.:accounts_env_vars.E2E_SERVICE_ACCOUNT_TOKEN))
          CF_ADMIN_KEY: ((.:accounts_env_vars.CF_ADMIN_KEY))
          CF_ADMIN_CERT: ((.:accounts_env_vars.CF_ADMIN_CERT))
          FULL_LOG_ON_ERR: yes-please
          GINKGO_NODES: 8

  - task: undeploy-korifi
    file: korifi-ci/pipelines/tasks/undeploy-korifi.yml
    image: ci-image
    params:
      CLUSTER_NAME: pr-e2e
      GCP_ZONE: europe-west1-b

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: success
          context: "Concourse - E2E (main)"
  ensure: &clean-pr-e2e-env
    do:
    - task: undeploy-korifi
      file: korifi-ci/pipelines/tasks/undeploy-korifi.yml
      image: ci-image
      attempts: 10
      params:
        CLUSTER_NAME: pr-e2e
        GCP_ZONE: europe-west1-b
    - task: deploy-latest-release
      file: korifi-ci/pipelines/tasks/deploy-latest-korifi-release.yml
      image: ci-image
      timeout: 30m
      params:
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        GCP_ZONE: europe-west1-b
        USE_LETSENCRYPT: ((.:cluster-env-vars.USE_LETSENCRYPT))
        DOCKER_SERVER: europe-west1-docker.pkg.dev
        DOCKER_USERNAME: _json_key
        DOCKER_PASSWORD: ((gcp-artifact-registry-writer))

- name: publish-dev-images
  on_failure:
    do:
    - put: korifi-status
      params:
        path: korifi
        statuses:
        - state: failure
          context: "Concourse - publish images (main)"
    - *slackHook
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
      trigger: true
      passed:
        - run-e2es-main
    - get: korifi-ci
    - get: korifi-release-version

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: pending
          context: "Concourse - publish images (main)"

  - task: publish-dev-images
    file: korifi-ci/pipelines/tasks/publish-dev-images.yml
    image: ci-image
    params:
      CLUSTER_NAME: pr-e2e
      GCP_ZONE: europe-west1-b
      REGISTRY_HOSTNAME: index.docker.io
      REGISTRY_USER: ((release-pipeline/dockerhub-auth.username))
      REGISTRY_PASSWORD: ((release-pipeline/dockerhub-auth.password))

  - put: korifi-status
    params:
      path: korifi
      statuses:
        - state: success
          context: "Concourse - publish images (main)"




# ===== PR =====
- name: allow-e2es
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi-ci
    - get: pr-label
      trigger: true

  - task: allow-e2e
    file: korifi-ci/pipelines/tasks/allow-e2e.yml
    image: ci-image
    params:
      KORIFI_BOT_TOKEN: ((github/korifi-bot-token))
      KORIFI_BOT_NAME: korifi-bot

- name: run-e2es-pr
  on_failure:
    do:
    - put: korifi-pr
      params:
        path: korifi-pr
        base_context: "Concourse "
        context: " e2e-tests (pull_request)"
        status: failure
    - *slackHook
    - *envoyLogs
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
      resource: korifi-pr
      trigger: true
      version: every
    - get: cf-k8s-secrets

  - put: korifi-pr
    params:
      path: korifi
      base_context: "Concourse "
      context: " e2e-tests (pull_request)"
      status: pending

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      PROPERTY: pr_e2e_ip

  - do: *end-to-ends

  - put: korifi-pr
    params:
      path: korifi
      base_context: "Concourse "
      context: " e2e-tests (pull_request)"
      status: success

  ensure:
    do:
    - *clean-pr-e2e-env

# ===== acceptance =====
- name: deploy-korifi-acceptance
  on_failure:
    *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: korifi
      trigger: true
      passed:
      - run-e2es-main
    - get: korifi-ci
    - get: ci-image
    - get: cf-k8s-secrets
    - get: gcloud-image

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
      PROPERTY: acceptance_ip
      USE_LETSENCRYPT: true

  - do: *deploy-korifi
  - do: *set-account-env-vars
  - do: *smoke-tests

- name: deploy-pairup
  on_failure:
    *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
    - get: korifi-ci
    - get: pairup
      trigger: true

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
  - load_var: cluster-env-vars
    file: clusters/env_vars.yaml
  - do: *set-account-env-vars

  - task: deploy-pairup
    file: korifi-ci/pipelines/tasks/deploy-pairup.yml
    image: ci-image
    params:
      CF_ADMIN_KEY: ((.:accounts_env_vars.CF_ADMIN_KEY))
      CF_ADMIN_CERT: ((.:accounts_env_vars.CF_ADMIN_CERT))
      CF_API_URL: cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
      FIREBASE_CONF: ((acceptance/pairup.config))
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      GCP_ZONE: europe-west1-b

- name: deploy-postfacto
  on_failure:
    *slackHook
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: ci-image
    - get: korifi
    - get: korifi-ci
    - get: postfacto
      trigger: true

  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
  - load_var: cluster-env-vars
    file: clusters/env_vars.yaml
  - do: *set-account-env-vars

  - task: deploy-postfacto
    file: korifi-ci/pipelines/tasks/deploy-postfacto.yml
    image: ci-image
    params:
      CF_ADMIN_KEY: ((.:accounts_env_vars.CF_ADMIN_KEY))
      CF_ADMIN_CERT: ((.:accounts_env_vars.CF_ADMIN_CERT))
      CF_API_URL: cf.((.:cluster-env-vars.CLUSTER_NAME)).korifi.cf-app.com
      CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
      GCP_ZONE: europe-west1-b

# ===== periodics =====
- name: run-tests-periodic
  on_failure:
    *slackHook
  plan:
  - in_parallel:
    - get: ci-image
    - get: golangci-lint-image
    - get: korifi
    - get: korifi-ci
    - get: workdays-periodic-timer
      trigger: true
    - get: weekend-periodic-timer
      trigger: true
  - in_parallel: *unit-integration

- name: run-e2es-periodic
  on_failure:
    do:
    - *slackHook
    - *envoyLogs
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: ci-image
    - get: gcloud-image
    - get: korifi-ci
    - get: korifi
    - get: cf-k8s-secrets
    - get: workdays-periodic-timer
      trigger: true
    - get: weekend-periodic-timer
      trigger: true
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
      PROPERTY: pr_e2e_ip
  - do: *end-to-ends
  ensure: *clean-pr-e2e-env

- name: bump-tests-vendor
  on_failure:
    *slackHook
  plan:
    - in_parallel:
      - get: ci-image
      - get: korifi-ci
      - get: korifi
      - get: bump-timer
        trigger: true
    - task: bump-tests-vendor
      file: korifi-ci/pipelines/tasks/bump-tests-vendor.yml
      image: ci-image

# ===== release =====
- name: bump-major-version
  plan:
  - get: korifi-release-version
    params:
      bump: major
  - put: korifi-release-version
    params:
      file: korifi-release-version/version
  on_failure: *slackHook

- name: bump-minor-version
  plan:
  - get: korifi-release-version
    params:
      bump: minor
    passed:
    - publish-release
  - put: korifi-release-version
    params:
      file: korifi-release-version/version
  on_failure: *slackHook

- name: publish-release
  plan:
  - in_parallel:
      steps:
      - get: korifi-ci
      - get: korifi
        passed:
        - run-e2es-main
      - get: korifi-release-version
      - get: ci-image
  - task: create-release
    file: korifi-ci/pipelines/tasks/create-release.yml
    image: ci-image
    params:
      CLUSTER_NAME: pr-e2e
      GCP_ZONE: europe-west1-b
      REGISTRY_HOSTNAME: index.docker.io
      REGISTRY_USER: ((release-pipeline/dockerhub-auth.username))
      REGISTRY_PASSWORD: ((release-pipeline/dockerhub-auth.password))
  - put: korifi-github-release
    params:
      globs:
      - release-output/korifi*.tgz
      name: korifi-release-version/version
      tag: korifi-release-version/version
      tag_prefix: v
      commitish: korifi/.git/ref
  on_failure: *slackHook

# ===== clusters =====

# ===== clusters:acceptance =====
- name: delete-cluster-acceptance
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: korifi-ci
    - get: ci-image
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
  - do: &deleteCluster
    - in_parallel:
      - get: gcloud-image
      - get: cf-k8s-secrets
    - load_var: cluster-env-vars
      file: clusters/env_vars.yaml
    - task: delete-kubernetes-cluster
      privileged: true
      file: korifi-ci/pipelines/tasks/delete-cluster.yml
      image: gcloud-image
      params:
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
    - put: cluster-event
      params:
        bump: major
  on_failure: *slackHook

- name: create-cluster-acceptance
  serial: true
  serial_groups:
  - acceptance
  plan:
  - in_parallel:
    - get: cluster-event
      trigger: true
      passed:
      - delete-cluster-acceptance
    - get: korifi-ci
    - get: ci-image
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: acceptance
  - do: &createCluster
    - in_parallel:
      - get: gcloud-image
      - get: cf-k8s-secrets
    - load_var: cluster-env-vars
      file: clusters/env_vars.yaml
    - task: delete-disks
      file: korifi-ci/pipelines/tasks/delete-disks.yml
      image: gcloud-image
      params:
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
    - task: create-kubernetes-cluster
      file: korifi-ci/pipelines/tasks/create-cluster.yml
      image: gcloud-image
      params:
        CLUSTER_NAME: ((.:cluster-env-vars.CLUSTER_NAME))
        NODE_MACHINE_TYPE: e2-custom-4-6144
    - put: cluster-event
      params:
        bump: major
  on_failure: *slackHook

# ===== clusters:pr-e2e =====
- name: delete-cluster-pr-e2e
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: pr-e2e-delete-timer
      trigger: true
    - get: korifi-ci
    - get: ci-image
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
  - do: *deleteCluster
  - task: clean-gcp-artifact-registry
    file: korifi-ci/pipelines/tasks/clean-gcp-artifact-registry.yml
    attempts: 10
    image: ci-image
  on_failure: *slackHook

- name: create-cluster-pr-e2e
  serial: true
  serial_groups:
  - pr-e2e
  plan:
  - in_parallel:
    - get: cluster-event
      trigger: true
      passed:
      - delete-cluster-pr-e2e
    - get: korifi-ci
    - get: ci-image
  - <<: *setClusterVars
    params:
      CLUSTER_NAME: pr-e2e
  - do: *createCluster
  on_failure: *slackHook

resource_types:
- name: slack-notification
  type: registry-image
  source:
    username: ((docker.user))
    password: ((docker.pass))
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status

resources:
- name: korifi-pr
  type: pull-request
  check_every: 1m
  source:
    repository: cloudfoundry/korifi
    access_token: ((github/korifi-bot-token))
    base_branch: main
    ignore_drafts: true
    labels: ["e2e-allowed"]
    required_review_approvals: 0

- name: pr-label
  type: pull-request
  check_every: 1m
  source:
    repository: cloudfoundry/korifi
    access_token: ((github/korifi-bot-token))
    base_branch: main
    ignore_drafts: true
    required_review_approvals: 0

- name: korifi-ci
  type: git
  icon: git
  source:
    uri: https://github.com/cloudfoundry/korifi-ci.git
    branch: main

- name: cf-k8s-secrets
  type: git
  icon: git
  source:
    uri: ((github/cf-k8s-secrets.uri))
    branch: main
    private_key: ((github/cf-k8s-secrets.private_key))

- name: slack
  type: slack-notification
  icon: slack
  source:
    url: ((slack-notification.uri))

- name: ci-image
  type: registry-image
  source:
    repository: europe-west1-docker.pkg.dev/cf-on-k8s-wg/ci/ci
    tag: latest
    username: _json_key
    password: ((gcp-artifact-registry-writer))

- name: gcloud-image
  type: registry-image
  source:
    repository: europe-west1-docker.pkg.dev/cf-on-k8s-wg/ci/gcloud
    tag: latest
    username: _json_key
    password: ((gcp-artifact-registry-writer))

- name: korifi
  type: git
  icon: git
  source:
    uri: https://github.com/cloudfoundry/korifi.git
    branch: main

- name: pairup
  type: git
  icon: git
  source:
    uri: https://github.com/eirini-forks/pairup.git
    branch: master

- name: postfacto
  type: github-release
  icon: egg-easter
  check_every: 12h0m0s
  source:
    access_token: ((github/korifi-bot-token))
    owner: pivotal
    globs: package.zip
    repository: postfacto


- name: korifi-status
  type: github-status
  icon: checkbox-marked
  source:
    repo: cloudfoundry/korifi
    access_token: ((github/korifi-bot-token))

- name: golangci-lint-image
  type: registry-image
  source:
    repository: golangci/golangci-lint
    tag: latest
    username: ((docker.user))
    password: ((docker.pass))

- name: korifi-github-release
  type: github-release
  icon: egg-easter
  source:
    access_token: ((github/korifi.create_release_access_token))
    drafts: true
    owner: cloudfoundry
    repository: korifi

- name: korifi-release-version
  type: semver
  icon: counter
  source:
    branch: main
    driver: git
    file: korifi-release/version
    initial_version: 0.1.0
    private_key: ((github/cf-k8s-secrets.private_key))
    uri: ((github/cf-k8s-secrets.uri))

- name: workdays-periodic-timer
  type: time
  source:
    interval: 20m
    start: 03:00 AM
    stop: 08:00 AM
    location: Europe/London
    initial_version: true

- name: weekend-periodic-timer
  type: time
  source:
    days: [Saturday, Sunday]
    interval: 20m
    start: 09:00 AM
    stop: 11:59 PM
    location: Europe/London
    initial_version: true

- name: bump-timer
  type: time
  source:
    days: [Monday,Tuesday,Wednesday,Thursday,Friday]
    start: 03:00 AM
    stop: 08:00 AM
    location: Europe/London
    initial_version: true

- name: pr-e2e-delete-timer
  type: time
  icon: bomb
  source:
    start: 8:00 AM
    stop: 9:00 AM

- name: cluster-event
  type: semver
  icon: check-decagram
  source:
    uri: ((github/cf-k8s-secrets.uri))
    branch: events
    driver: git
    file: cluster-event
    initial_version: 0.1.0
    private_key: ((github/cf-k8s-secrets.private_key))
